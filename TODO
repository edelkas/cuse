TODO:

- Solve todo's specified in the source file.

Backend:
- Create cache system:
    * Implement cache expiring (thread?), test thoroughly.
    * Add a button in the interface to clean the cache manually, useful for
      browsing the newest userlevels.
    * Optimization idea: On the first outte request, only return userlevel IDs.
      Then, CUSE requests the map data only for those userlevels that aren't cached
      yet.
- Make program check Github regularly for new versions, possibly even auto-update.
- Allow for regex searches.
- Have config file: default date format, default filter values.
- Multiple config profiles?
- Save latest state (tabs, searches...) when closing, and load them at the start.
- Allow to save/load level sets (not all, just visible ones).

Frontend:
- N++ button should perhaps be a double state one (active/deactivate proxying),
  have two versions of the icon for this (red/green?)
- Add tabs to the userlevel result table, so that multiple searches and result sets
  can be maintained simultaneously. Keep everything (filters, userlevels, paging...)
  in memory. Also, move page navigation to this part, and add button to add/remove
  tabs, invidually and globally.
- Add buttons to navigate all executed searches (they're all in memory). This should
  be independent for each tab, and contain all searches that have been executed from
  that tab (obviously, only one search for each combination of filters, not for each
  page, we should remember the last page each search was at).
- As an alternative, have a CLI + Enter option to execute searches.
- Help tooltips for filters and others
- RadioButton to toggle between in-game or in-program pagination, since both
  don't work together properly.
- Lightbulb buttons next to filters and such that provide help in a dialog
  with a smaller font.
- Headers in level table should reorder by that field, but only those 25 levels.
  This can be done with the "command" option in "heading_configure".
- Screenshots:
    * Show screenshot previews of userlevels, individually when one is selected.
    * Show result as 25 previews, rather than as a list. Allow to toggle between
      list and previews using a RadioButton (only if the screenshots can be
      generated efficiently).
    * Tooltip to show screenshot when hovering a userlevel, or show userlevel info
      when hovering the screenshot if in screenshot mode.

Outte:
- Implement extra userlevel queries (date ranges, ID ranges, highscore count),
  perhaps by adding new fields to Userlevel table for quickness. For date ranges,
  add aux functions to convert date into ID, and then just find the intersection of
  the date and ID ranges (if provided). ID is indexed, so this should be fast.
- Create cache system:
    * Cache only the list of userlevel IDs resulting from a specific search, by
      keeping track of all search filters used, so that we know when a certain
      search is cached or not.
    * Limit the cache by keeping track of:
        - The date, to let them expire.
        - The amount of cached searches.
        - Most importantly, the total memory usage of the cache.
- Create new field in UserlevelData table of outte's db to contain the Zlibbed block
  and header, ready to be dumped in the final file, for efficiency.

Investigate:
- What happens when you switch userlevel tabs very quickly? (sockets closing, etc).
- Look into N++'s userlevel cache, perhaps we can disable it.
